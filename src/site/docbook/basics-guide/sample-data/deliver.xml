<agendas>
    <agenda> <!--General Checks: rules to validate Patron (generalBlock, expiration date, address, barcode, and, if proxy, a rule for proxy expiration date check-->
        <name>General Checks</name>
        <rules>
            <rule> <!--GeneralBlock: if generalBlock=true then display error message-->
                <name>isGeneralBlock</name>
                <oleProposition> <!--if generalBlock=true-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>generalBlock</value>
                        </term>
                        <operator>=</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>true</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then display error message-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>This patron has a general block</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--PatronMembershipExpirationDate: if patron expiration date has past; if currentDateFunction (expirationDate) is true, then display error message-->
                <name>PatronMembershipExpirationDate</name>
                <oleProposition> <!--if currentDateFunction (expirationDate) is true-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>currentDateFunction</function>
                        <term>
                            <type>java.util.Date</type>
                            <value>expirationDate</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then display error message-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>The patron's record has expired.</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--AddressVerification: if isAddressVerified = false, then display error message-->
                <name>AddressVerification</name>
                <oleProposition> <!--if isAddressVerified = false-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>isAddressVerified</value>
                        </term>
                        <operator>=</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>false</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then display error message-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>Patron's address has not been verified.</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--Check Digit Routines For Patron: if digitRoutine = true AND patronBarCode = pattern, then display error message-->
                <name>Check Digit Routines For Patron</name>
                <oleProposition> <!--if digitRoutine = true AND patronBarCode = pattern-->
                    <type>compound</type>
                    <compoundProposition>
                        <operator>AND</operator>
                        <simpleProposition> <!--if digitRoutine = true-->
                            <term>
                                <type>java.lang.String</type>
                                <value>digitRoutine</value>
                            </term>
                            <operator>=</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>true</name>
                                </value>
                            </values>
                        </simpleProposition>
                        <simpleProposition> <!--if patronBarCode = pattern-->
                            <function>CheckDigitRoutine</function>
                            <term>
                                <type>java.lang.String</type>
                                <value>patronBarcode</value>
                            </term>
                            <term>
                                <type>java.lang.String</type>
                                <value>pattern</value>
                            </term>
                        </simpleProposition>
                    </compoundProposition>
                </oleProposition>
                <trueActions> <!--then display error message-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>The format of the patron's barcode is invalid</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--Patron Proxy Check: if isProxyPatron = true, then (if currentDateFunction(proxyExpirationDate) = true then display error message)-->
                <name>ProxyVerification</name>
                <oleProposition> <!--if isProxyPatron = true-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>isProxyPatron</value>
                        </term>
                        <operator>=</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>true</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--patron proxy expiration date check : if currentDateFunction(proxyExpirationDate) = true then display error message-->
                        <name>PatronMembershipExpirationDateForProxy</name>
                        <oleProposition> <!--if currentDateFunction(proxyExpirationDate) = true-->
                            <type>simple</type>
                            <simpleProposition>
                                <function>currentDateFunction</function>
                                <term>
                                    <type>java.util.Date</type>
                                    <value>proxyExpirationDate</value>
                                </term>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--then display error message-->
                            <action>
                                <name>errorAction</name>
                                <parameter>
                                    <name>errorMessage</name>
                                    <value>The proxy record has expired</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
        </rules>
    </agenda>
    <agenda> <!--CheckOut Validation: rules to validate Item: loaned and lost statuses, Barcode, item location compared to circdesk locations. Contains sub rules for 3 check out policies based on combinations of Item and Patron characteristics; Policies set loan periods, and checks for existing 'claims', fines, limits on # of items checked out, and overdue-->
        <name>CheckOut Validation</name>
        <rules>
            <rule> <!--CheckOut Status Validation: if itemStatus=loaned, then display error, Else (if it's onhold for someone else, then display error)-->
                <name>CheckOut Status Validation</name>
                <oleProposition> <!--if itemStatus=Loaned-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>itemStatus</value>
                        </term>
                        <operator>=</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>LOANED</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then display error-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>Item status is loaned</value>
                        </parameter>
                    </action>
                </trueActions>
                <falseActions>
                    <rule> <!--OnHold Status Validation: if patron != 1st position and requestType in (any hold or delivery type) and the itemstatus=OnHold, then display error 'onhold for someone else'-->
                        <name>OnHold Status Validation</name>
                        <oleProposition> <!--if isPatronInPositionOne=false AND requestType in (recall hold or delivery or page hold or delivery or hold/hold) AND if itemStatus=OnHold-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if isPatronInPositionOne=false-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>isPatronInPositionOne</value>
                                    </term>
                                    <operator>=</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>false</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <compoundProposition> <!--Rich (in consultation with Cheryl M) changed this section to a compound OR - if request (any but copy and in transit request) exists for the item OR the item is on hold.  We may remove the check for item hold status after we've determined when a hold request goes away. -->
									<operator>OR</operator>
									<simpleProposition> <!--if requestType in recall/hold, recall/delivery, page/hold, page/delivery, hold/hold-->
										<term>
											<type>java.lang.String</type>
											<value>requestType</value>
										</term>
										<operator>IN</operator>
										<values>
											<value>
												<type>java.lang.String</type>
												<name>Recall/Delivery Request</name>
											</value>
											<value>
												<type>java.lang.String</type>
												<name>Recall/Hold Request</name>
											</value>
											<value>
												<type>java.lang.String</type>
												<name>Hold/Delivery Request</name>
											</value>
											<value>
												<type>java.lang.String</type>
												<name>Hold/Hold Request</name>
											</value>
											<value>
												<type>java.lang.String</type>
												<name>Page/Hold Request</name>
											</value>
											<value>
												<type>java.lang.String</type>
												<name>Page/Delivery Request</name>
											</value>
											<value>
												<type>java.lang.String</type>
												<name>Copy Request</name>
											</value>
											<value>
												<type>java.lang.String</type>
												<name>In Transit Request</name>
											</value>
										</values>
									</simpleProposition>
									<simpleProposition> <!--if itemStatus=OnHold-->
										<term>
											<type>java.lang.String</type>
											<value>itemStatus</value>
										</term>
										<operator>=</operator>
										<values>
											<value>
												<type>java.lang.String</type>
												<name>ONHOLD</name>
											</value>
										</values>
									</simpleProposition>
								</compoundProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions> <!--then display error onhold for another patron-->
                            <action>
                                <name>errorAction</name>
                                <parameter>
                                    <name>errorMessage</name>
                                    <value>Item has been requested by another patron.</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                </falseActions>
            </rule>
            <rule> <!--Lost Status Validation: if itemStatus=LOST, then display error-->
                <name>Lost Status Validation</name>
                <oleProposition> <!--if itemStatus=LOST-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>itemStatus</value>
                        </term>
                        <operator>=</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>LOST</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then display error-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>Item status is Lost</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--Check Digit Routines For Item: if digitRoutine=true AND if itemBarcode=pattern, then display error message item barcode invalid-->
                <name>Check Digit Routines For Item</name>
                <oleProposition> <!--if digitRoutine=true AND if itemBarcode=pattern-->
                    <type>compound</type>
                    <compoundProposition>
                        <operator>AND</operator>
                        <simpleProposition> <!--if digitRoutine=true-->
                            <term>
                                <type>java.lang.String</type>
                                <value>digitRoutine</value>
                            </term>
                            <operator>=</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>true</name>
                                </value>
                            </values>
                        </simpleProposition>
                        <simpleProposition> <!--if itemBarcode=pattern-->
                            <function>CheckDigitRoutine</function>
                            <term>
                                <type>java.lang.String</type>
                                <value>itemBarcode</value>
                            </term>
                            <term>
                                <type>java.lang.String</type>
                                <value>pattern</value>
                            </term>
                        </simpleProposition>
                    </compoundProposition>
                </oleProposition>
                <trueActions> <!--then dispaly error message item barcode invalid-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>The format of the item barcode is invalid</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--LocationValidation: if containsFunction(itemLocation) = circdesklocation, else Else display error-->
                <name>LocationValidation</name>
                <oleProposition> <!--if containsFunction(itemLocation) = circdesklocation-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>containsFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>itemLocation</value>
                        </term>
                        <term>
                            <type>java.lang.String</type>
                            <value>operatorsCirculationLocation</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <falseActions> <!--Else display error-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>This item cannot be checked out from this circulation desk</value>
                        </parameter>
                    </action>
                </falseActions>
            </rule>
            <rule> <!--Circulation Policy Set 1 Validation: if circpolicyFound = isCircPolicyNotFound, then run the policy rules-->
                <name>Circulation Policy Set 1 Validation</name>
                <oleProposition> <!--if circpolicyFound = isCircPolicyNotFound-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--Check out Circulation Policy Set 1: if specified borrowerTypes, itemTypes, and itemLibraryLocation, then policyFound=true, AND loan period=10-D, AND overdueDay=30 AND recallOverDueDay=25 AND runs checks on checkClaimsReturned, overdueFineAmt, replacementOverdueFineAmt, overallCharges, limitOnCheckedOutItems, limitOnBorrowerOverdueItems, limitOnOverdueRecalledItems AND for each display appropriate errors -->
                        <name>Check out Circulation Policy Set 1</name>
                        <oleProposition> <!--check borrowerType, itemType, and itemLibrary-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrower in (Undergrad, Grad)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>UGRAD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GRAD</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--If item in (BOOK, MAGAZINE)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemLibrary in B-EDUC, B-HPER, B-BUSSPEA-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemLibrary</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-EDUC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-HPER</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-BUSSPEA</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--then policyfound = true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <action> <!--then loanPeriod=1-D-->
                                <name>loanPeriod</name>
                                <parameter>
                                    <name>loanPeriod</name>
                                    <value>1-D</value>
                                </parameter>
                            </action>
                            <action> <!--then overdueDay=1 -->
                                <name>overdueDay</name>
                                <parameter>
                                    <name>overdueDay</name>
                                    <value>1</value>
                                </parameter>
                            </action>
                            <action> <!--then recallOverdueDay=1-->
                                <name>recallOverdueDay</name>
                                <parameter>
                                    <name>recallOverdueDay</name>
                                    <value>1</value>
                                </parameter>
                            </action>
                            <rule> <!--then run Check Claims Returned: if numberOfClaimsReturned>5, then display error-->
                                <name>Check Claims Returned</name>
                                <oleProposition> <!--if numberOfClaimsReturned>2-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfClaimsReturned</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>2</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 2 claims returned</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run Check all Overdue fine amount: if overdue fine exceeds 5, then display error-->
                                <name>Check all Overdue fine amount</name>
                                <oleProposition> <!--if overdue fine exceeds 5-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>overdueFineAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>5</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has overdue fines in excess of $5</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run Check Replacement fee amt:if replacement fee greater than 10, then display error-->
                                <name>Check Replacement fee amt</name>
                                <oleProposition> <!--if replacement fee greater than 10-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>replacementFeeAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>10</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has replacement fees in excess of $10</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run Check Overall Charges: if allcharges >15, then display error-->
                                <name>Check Overall Charges</name>
                                <oleProposition> <!--if allcharges >15-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>allCharges</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>15</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron's overall charges exceed $15</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run BorrowerLimitForCheckedOutItems: if numberOfItemsCheckedOut>10, then display error-->
                                <name>BorrowerLimitForCheckedOutItems</name>
                                <oleProposition> <!--if numberOfItemsCheckedOut>10-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>10</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 10 items checked out.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run BorrowerLimitForCheckedOutOverdueItems: if numberOfOverdueItemsCheckedOut>2, then display error-->
                                <name>BorrowerLimitForCheckedOutOverdueItems</name>
                                <oleProposition> <!--if numberOfOverdueItemsCheckedOut>2-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfOverDueItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>2</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 2 items overdue.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run BorrowerLimitForCheckedOutOverdueRecalledItems: if numberOfOverdueRecalledItemsCheckedOut>1, then display error-->
                                <name>BorrowerLimitForCheckedOutOverdueRecalledItems</name>
                                <oleProposition> <!--if numberOfOverdueRecalledItemsCheckedOut>1-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfOverDueRecalledItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>1</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 1 overdue recalled items.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Circulation Policy Set 2 Validation:  This rule 1st checks whether an appropriate circulation policy has been found and if not, checks to see if this is the policy to use-->
                <name>Circulation Policy Set 2 Validation</name>
                <oleProposition> <!--if circpolicyFound = isCircPolicyNotFound, then run the policy rules-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--Check out Circulation Policy Set 2: if borrowerType in (faculty, staff) AND itemType in (BOOK, magazine) AND (itemLibrary in (B-HPER) OR itemShelving in (BEDJOURNALS, GEN)), then circpolicyFound=True AND set loanPeriod=fixedDueDate, OverDueDay=20, recallOverDueDay=15, AND runs checks on checkClaimsReturned, overdueFineAmt, replacementOverdueFineAmt, overallCharges, limitOnCheckedOutItems, limitOnBorrowerOverdueItems, limitOnOverdueRecalledItems AND for each display appropriate errors-->
                        <name>Check out Circulation Policy Set 2</name>
                        <oleProposition> <!--if borrowerType in (faculty, staff) AND itemType in (BOOK, MAGAZINE,AUDIOCD,AV,AUDIOTAPE,MICRO) AND (ItemLibrary in (PERKN) OR itemShelving in (PLI, PLV1))-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (faculty, staff)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FAC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>STAFF</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemType in (BOOK, MAGAZINE, AUDIOCD,AV,AUDIOTAPE,MICRO)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AUDIOCD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AV</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AUDIOTAPE</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MICRO</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <compoundProposition> <!--if ItemLibrary in (PERKN) OR itemShelving in (PLI, PLV1)-->
                                    <operator>OR</operator>
                                    <simpleProposition> <!--if itemLibrary in (PERKN)-->
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>itemLibrary</value>
                                        </term>
                                        <operator>IN</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>PERKN</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                    <simpleProposition> <!--if itemShelving in (PLI, PLV1)-->
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>itemShelving</value>
                                        </term>
                                        <operator>IN</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>PLI</name>
                                            </value>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>PLV1</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </compoundProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--then circpolicyfound=true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <action> <!--then loanPeriod=fixedDueDate (due date set from maintenance doc fixedDueDate value; if not found then app sets dueDate=patronExpirationDate and if that's not found, then this is an 'indefinite loan' and never requires renewal)-->
                                <name>loanPeriod</name>
                                <parameter>
                                    <name>loanPeriod</name>
                                    <value>fixedDueDate</value>
                                </parameter>
                            </action>
                            <action> <!--then overdueDay=2-->
                                <name>overdueDay</name>
                                <parameter>
                                    <name>overdueDay</name>
                                    <value>2</value>
                                </parameter>
                            </action>
                            <action> <!--then recallOverdueDay=1-->
                                <name>recallOverdueDay</name>
                                <parameter>
                                    <name>recallOverdueDay</name>
                                    <value>1</value>
                                </parameter>
                            </action>
                            <rule> <!--Check Claims Returned 2: if numberOfClaimsReturned > 2, then display error-->
                                <name>Check Claims Returned 2</name>
                                <oleProposition> <!--if numberOfClaimsReturned > 2-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfClaimsReturned</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>2</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 2 claims returned</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--Check all Overdue fine amount 2: if overdueFineAmt > 2, then display error-->
                                <name>Check all Overdue fine amount 2</name>
                                <oleProposition> <!--if overdueFineAmt > 2-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>overdueFineAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>2</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has overdue fines in excess of $2</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--Check Replacement fee amt 2: if replacementFeeAmt > 7, then display error-->
                                <name>Check Replacement fee amt 2</name>
                                <oleProposition> <!--if replacementFeeAmt > 7-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>replacementFeeAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>7</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than $7 in Replacement Fee Charges</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--Check Overall Charges 2: if allCharges > 9, then display error-->
                                <name>Check Overall Charges 2</name>
                                <oleProposition> <!--if allCharges > 9-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>allCharges</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>9</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than $9 in overall charges</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--BorrowerLimitForCheckedOutItems 2: if numberOfItemsCheckedOut > 12, then display error-->
                                <name>BorrowerLimitForCheckedOutItems 2</name>
                                <oleProposition> <!--if numberOfItemsCheckedOut > 12-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>12</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 12 items checked out.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--BorrowerLimitForCheckedOutOverdueItems 2: if numberOfOverDueItemsCheckedOut > 6, then display error-->
                                <name>BorrowerLimitForCheckedOutOverdueItems 2</name>
                                <oleProposition> <!--if numberOfOverDueItemsCheckedOut > 6-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfOverDueItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>6</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 6 overdue items checked out.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--BorrowerLimitForCheckedOutOverdueRecalledItems 2: if numberOfOverDueRecalledItemsCheckedOut > 2, then display error-->
                                <name>BorrowerLimitForCheckedOutOverdueRecalledItems 2</name>
                                <oleProposition> <!--if numberOfOverDueRecalledItemsCheckedOut > 2-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfOverDueRecalledItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>2</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 2 overdue recalled items checked out.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Circulation Policy Set 3 Validation:  This rule 1st checks whether an appropriate circulation policy has been found and if not, checks to see if this is the policy to use-->
                <name>Circulation Policy Set 3 Validation</name>
                <oleProposition> <!--if circulationPolicyFoundFunction(isCirculationPolicyNotFound)-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--Check out Circulation Policy Set 3: if borrowerType in (researcher, guest, Faculty) AND itemType in (BOOK, magazine) AND itemShelving in (JRLRES, LawRes, FRD, SciDDC), then circpolicyFound=True AND set loanPeriod=11-D, OverDueDay=25, recallOverDueDay=25, AND runs checks on checkClaimsReturned, overdueFineAmt, replacementOverdueFineAmt, overallCharges, limitOnCheckedOutItems, limitOnBorrowerOverdueItems, limitOnOverdueRecalledItems AND for each display appropriate errors-->
                        <name>Check out Circulation Policy Set 3</name>
                        <oleProposition> <!--if borrowerType in (researcher, Guest, Faculty) AND, is the item a BOOK or a magazine, is the item's location covered by this policy-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (researcher, guest)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>RES</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GUEST</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FAC</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemType in (BOOK, magazine)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!-- if itemShelving in (JRLRES, LawRes, FRD, SciDDC)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemShelving</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>JRLRES</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>LawRes</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FRD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>SciDDC</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--then CircPolicyFound=true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <action> <!--then loanPeriod = 2-H-->
                                <name>loanPeriod</name>
                                <parameter>
                                    <name>loanPeriod</name>
                                    <value>2-H</value>
                                </parameter>
                            </action>
                            <action> <!--then overDueDay = 2-->
                                <name>overdueDay</name>
                                <parameter>
                                    <name>overdueDay</name>
                                    <value>2</value>
                                </parameter>
                            </action>
                            <action> <!--then recalloverduedays = 3-->
                                <name>recallOverdueDay</name>
                                <parameter>
                                    <name>recallOverdueDay</name>
                                    <value>3</value>
                                </parameter>
                            </action>
                            <rule> <!--Check Claims Returned 3: if numberOfClaimsReturned > 1, then display error-->
                                <name>Check Claims Returned 3</name>
                                <oleProposition> <!--if numberOfClaimsReturned > 1-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfClaimsReturned</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>1</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--then display error-->
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 1 claim returned</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--Check all Overdue fine amount 3: if overdueFineAmt > 6, then display error-->
                                <name>Check all Overdue fine amount 3</name>
                                <oleProposition> <!--if overdueFineAmt > 6-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>overdueFineAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>6</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has overdue fines in excess of $6</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--Check Replacement fee amt 3: if replacementFeeAmt > 6, then display error-->
                                <name>Check Replacement fee amt 3</name>
                                <oleProposition> <!--if replacementFeeAmt > 6-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>replacementFeeAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>6</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than $6 in Replacement Fee Charges</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--Check Overall Charges 3: if allCharges > 12, then display error-->
                                <name>Check Overall Charges 3</name>
                                <oleProposition> <!--if allCharges > 12-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>allCharges</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>12</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than $12 in overall charges.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--BorrowerLimitForCheckedOutItems 3: if numberOfItemsCheckedOut > 25, then display error-->
                                <name>BorrowerLimitForCheckedOutItems 3</name>
                                <oleProposition> <!--if numberOfItemsCheckedOut > 11-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>11</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 11 items checked out.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--BorrowerLimitForCheckedOutOverdueItems 3: if numberOfOverDueItemsCheckedOut > 28, then display error-->
                                <name>BorrowerLimitForCheckedOutOverdueItems 3</name>
                                <oleProposition> <!--if numberOfOverDueItemsCheckedOut > 2-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfOverDueItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>2</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 2 overdue items checked out.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--BorrowerLimitForCheckedOutOverdueRecalledItems 3: if numberOfOverDueRecalledItemsCheckedOut > 1, then display error-->
                                <name>BorrowerLimitForCheckedOutOverdueRecalledItems 3</name>
                                <oleProposition> <!--if numberOfOverDueRecalledItemsCheckedOut > 1-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfOverDueRecalledItemsCheckedOut</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>1</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 1 overdue recalled items checked out.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--if none of the above policies fit combination of item and patron, display the policy not found message-->
                <name>Check out Circulation Policy Not Found</name>
                <oleProposition>
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>There is no circulation rule for this combination</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
        </rules>
    </agenda>
    <agenda> <!--Renewal: rules to validate Item (barcode check); compare item location to circDesk locations. Contains sub rule for renewal policy based on item and patron combinations of item and Patron characteristics; Policies set loan periods, checks on patron claims, fines, number of times renewed-->
        <name>Renewal Validation</name>
        <rules>
            <rule> <!--Renewal Check Digit Routines For Item: if digitRoutine=true AND CheckDigitRoutine(pattern), then display error-->
                <name>Renewal Check Digit Routines For Item</name>
                <oleProposition> <!--if digitRoutine=true AND CheckDigitRoutine(pattern)-->
                    <type>compound</type>
                    <compoundProposition>
                        <operator>AND</operator>
                        <simpleProposition> <!--if digitRoutine=true-->
                            <term>
                                <type>java.lang.String</type>
                                <value>digitRoutine</value>
                            </term>
                            <operator>=</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>true</name>
                                </value>
                            </values>
                        </simpleProposition>
                        <simpleProposition> <!--if CheckDigitRoutine(pattern)-->
                            <function>CheckDigitRoutine</function>
                            <term>
                                <type>java.lang.String</type>
                                <value>itemBarcode</value>
                            </term>
                            <term>
                                <type>java.lang.String</type>
                                <value>pattern</value>
                            </term>
                        </simpleProposition>
                    </compoundProposition>
                </oleProposition>
                <trueActions> <!--then display error-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>The format of the item barcode is invalid</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule>  <!--LocationValidation for Renewal:if containsFunction(itemLocation, operatorsCirculationLocation), else display error-->
                <name>LocationValidation for Renewal</name>
                <oleProposition> <!--if containsFunction(itemLocation, operatorsCirculationLocation)-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>containsFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>itemLocation</value>
                        </term>
                        <term>
                            <type>java.lang.String</type>
                            <value>operatorsCirculationLocation</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <falseActions> <!--else display error-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>There is a mismatch in circulation desk coverage and the item's location.</value>
                        </parameter>
                    </action>
                </falseActions>
            </rule>
            <rule> <!--Circulation Policy Set 1 Validation for Renewal: if circulationPolicyFoundFunction(isCirculationPolicyNotFound), then -->
                <name>Circulation Policy Set 1 Validation for Renewal</name>
                <oleProposition> <!--if circulationPolicyFoundFunction(isCirculationPolicyNotFound)-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--Renewal Circulation Policy Set 1: if borrowerType in (Undergrad, Graduate) AND itemType in (BOOK, MAGAZINE), then circulationPolicyFound=true AND circulationPolicyFound=true AND loanPeriod = 10-D AND overdueDay = 30 AND recallOverdueDay = 25 AND run Check Claims Returned for Renewal, Check all Overdue fine amount for Renewal, Check Replacement fee amt for Renewal, Check Overall Charges for Renewal, RenewalLimit, IndefiniteCheck, FixedDueDateCheck and display appropriate messages-->
                        <name>Renewal Circulation Policy Set 1</name>
                        <oleProposition><!--if borrowerType in (Undergrad, Graduate) AND itemType in (BOOK, MAGAZINE)-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (Undergrad, Graduate)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>UGRAD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GRAD</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--If itemType in (BOOK, MAGAZINE)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions> <!--then circulationPolicyFound=true AND loanPeriod = 10-D AND overdueDay = 30 AND recallOverdueDay = 25 AND run Check Claims Returned for Renewal, Check all Overdue fine amount for Renewal, Check Replacement fee amt for Renewal, Check Overall Charges for Renewal, RenewalLimit, IndefiniteCheck, FixedDueDateCheck and display appropriate messages-->
                            <action> <!--then circulationPolicyFound=true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <action> <!--then loanPeriod = 10-D-->
                                <name>loanPeriod</name>
                                <parameter>
                                    <name>loanPeriod</name>
                                    <value>10-D</value>
                                </parameter>
                            </action>
                            <action> <!--then overdueDay = 30-->
                                <name>overdueDay</name>
                                <parameter>
                                    <name>overdueDay</name>
                                    <value>30</value>
                                </parameter>
                            </action>
                            <action> <!--then recallOverdueDay = 25-->
                                <name>recallOverdueDay</name>
                                <parameter>
                                    <name>recallOverdueDay</name>
                                    <value>25</value>
                                </parameter>
                            </action>
                            <rule> <!--then run Check Claims Returned for Renewal: if numberOfClaimsReturned > 5, then display error-->
                                <name>Check Claims Returned for Renewal</name>
                                <oleProposition> <!--if numberOfClaimsReturned > 5-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfClaimsReturned</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>5</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than 5 claims returned</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run Check all Overdue fine amount for Renewal: if overdueFineAmt > 25, then display error-->
                                <name>Check all Overdue fine amount for Renewal</name>
                                <oleProposition> <!--if overdueFineAmt > 25-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>overdueFineAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>25</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has overdue fines in excess of $25</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run Check Replacement fee amt for Renewal: if replacementFeeAmt greater than 75, then display error-->
                                <name>Check Replacement fee amt for Renewal</name>
                                <oleProposition> <!--if replacementFeeAmt > 75-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>replacementFeeAmt</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>75</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than $75 in Replacement Fee Charges.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run Check Overall Charges for Renewal: if allCharges > 150, then display error-->
                                <name>Check Overall Charges for Renewal</name>
                                <oleProposition> <!--if allCharges > 150-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>allCharges</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>150</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Patron has more than $150 in overall charges.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run RenewalLimit: if numberofRenewals > 1, then display error-->
                                <name>RenewalLimit</name>
                                <oleProposition> <!--if numberOfRenewals > 1 (this may be the number of renewal times/vijay is confirming 3/26/2013-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>numberOfRenewals</value>
                                        </term>
                                        <operator>greaterThan</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>1</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>The item has been renewed the maximum (1) number of times.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run IndefiniteCheck: if itemDueDateString=null, then display error-->
                                <name>IndefiniteCheck</name>
                                <oleProposition> <!--if itemDueDateString=null-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>itemDueDateString</value>
                                        </term>
                                        <operator>=</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>null</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Items on indefinite loan do not need to be renewed.</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--then run FixedDueDateCheck: if currentDateFunction(itemDueDate), then overdueFine = 10/H, then maxFine = 100, else display error-->
                                <name>FixedDueDateCheck</name>
                                <oleProposition> <!--if currentDateFunction(itemDueDate)-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <function>currentDateFunction</function>
                                        <term>
                                            <type>java.util.Date</type>
                                            <value>itemDueDate</value>
                                        </term>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--then overdueFine = 10/H, then maxFine = 100-->
                                    <action> <!--then overdueFine = 10/H-->
                                        <name>overdueFine</name>
                                        <parameter>
                                            <name>overdueFine</name>
                                            <value>10/H</value>
                                        </parameter>
                                    </action>
                                    <action> <!--then maxFine = 100-->
                                        <name>maxFine</name>
                                        <parameter>
                                            <name>maxFine</name>
                                            <value>100</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                                <falseActions> <!--else display error-->
                                    <action>
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Please renew on or after due date</value>
                                        </parameter>
                                    </action>
                                </falseActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Renewal Circulation Policy Not Found: if circulationPolicyFoundFunction(isCirculationPolicyNotFound), then display error-->
                <name>Renewal Circulation Policy Not Found</name>
                <oleProposition> <!--if circulationPolicyFoundFunction(isCirculationPolicyNotFound)-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then display error-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>There is no circulation rule for this combination.</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
        </rules>
    </agenda>
    <agenda> <!--Check-in: rules to validate Item; barcode check; checks based on item status (in transit; intransit for hold; intransit for staff request) and setting new status; checks for requests against the item and setting new statuses; Contains sub rules for check in policies based on combined characteristics of item and patron; Policies set "lost" and overdue penalties-->
        <name>Check-in Validation</name>
        <rules>
            <rule> <!--BarCode Validation; if digitRoutine=true AND CheckDigitRoutine(itemBarcode, pattern), then display error-->
                <name>Check Digit Routines For Check-in Item</name>
                <oleProposition> <!--if digitRoutine=true AND CheckDigitRoutine(itemBarcode, pattern)-->
                    <type>compound</type>
                    <compoundProposition>
                        <operator>AND</operator>
                        <simpleProposition> <!--if digitRoutine=true-->
                            <term>
                                <type>java.lang.String</type>
                                <value>digitRoutine</value>
                            </term>
                            <operator>=</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>true</name>
                                </value>
                            </values>
                        </simpleProposition>
                        <simpleProposition> <!--if CheckDigitRoutine(itemBarcode, pattern)-->
                            <function>CheckDigitRoutine</function>
                            <term>
                                <type>java.lang.String</type>
                                <value>itemBarcode</value>
                            </term>
                            <term>
                                <type>java.lang.String</type>
                                <value>pattern</value>
                            </term>
                        </simpleProposition>
                    </compoundProposition>
                </oleProposition>
                <trueActions> <!--then display error-->
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>The format of the item's barcode is invalid</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--InTransitCheck; if containsFunction(itemlocation, operatorsCirculationLocation), then (if itemstatus in (intransit), then itemstatus = AVAILABLE, else (if shelvingLagTime > 0, then updateItemStatus=Recently-Returned, Else updateItemStatus = Available)), else updateItemStatus = INTRANSIT-->
                <name>InTransitCheck</name>
                <oleProposition> <!--if containsFunction(itemlocation, operatorsCirculationLocation)-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>containsFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>itemLocation</value>
                        </term>
                        <term>
                            <type>java.lang.String</type>
                            <value>operatorsCirculationLocation</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then (run rule Recently returned Check based on inTransit: if shelvingLagTime > 0, then updateItemStatus=Recently-Returned, Else  updateItemStatus = Available)-->
                    <rule> <!--Recently returned Check based on inTransit: if shelvingLagTime > 0, then updateItemStatus=Recently-Returned, Else updateItemStatus = Available-->
                        <name>Recently returned Check based on inTransit</name>
                        <oleProposition> <!--if shelvingLagTime > 0-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.Integer</type>
                                    <value>shelvingLagTime</value>
                                </term>
                                <operator>greaterThan</operator>
                                <values>
                                    <value>
                                        <type>java.lang.Integer</type>
                                        <name>0</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--then updateItemStatus=Recently-Returned-->
                            <action>
                                <name>updateItemStatus</name>
                                <parameter>
                                    <name>updateItemStatus</name>
                                    <value>RECENTLY-RETURNED</value>
                                </parameter>
                            </action>
                        </trueActions>
                        <falseActions> <!--else updateItemStatus = Available-->
                            <action>
                                <name>updateItemStatus</name>
                                <parameter>
                                    <name>updateItemStatus</name>
                                    <value>AVAILABLE</value>
                                </parameter>
                            </action>
                        </falseActions>
                    </rule>
                </trueActions>
                <falseActions> <!--else updateItemStatus = INTRANSIT-->
                    <action>
                        <name>updateItemStatus</name>
                        <parameter>
                            <name>updateItemStatus</name>
                            <value>INTRANSIT</value>
                        </parameter>
                    </action>
                </falseActions>
            </rule>
            <rule> <!--OnHoldInPickupLocation: if containsFunction(itemPickupLocation, operatorsCirculationLocation) AND itemStatus in (INTRANSIT-FOR-HOLD) then updateItemStatus to ONHOLD-->
                <name>OnHoldInPickupLocation</name>
                <oleProposition> <!--if containsFunction(itemPickupLocation, operatorsCirculationLocation) AND itemStatus in (INTRANSIT-FOR-HOLD)-->
                    <type>compound</type>
                    <compoundProposition>
                        <operator>AND</operator>
                        <simpleProposition> <!--if containsFunction(itemPickupLocation, operatorsCirculationLocation)-->
                            <function>containsFunction</function>
                            <term>
                                <type>java.lang.String</type>
                                <value>itemPickUpLocation</value>
                            </term>
                            <term>
                                <type>java.lang.String</type>
                                <value>operatorsCirculationLocation</value>
                            </term>
                        </simpleProposition>
                        <simpleProposition> <!--if itemStatus in (INTRANSIT-FOR-HOLD)-->
                            <term>
                                <type>java.lang.String</type>
                                <value>itemStatus</value>
                            </term>
                            <operator>IN</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>INTRANSIT-FOR-HOLD</name>
                                </value>
                            </values>
                        </simpleProposition>
                    </compoundProposition>
                </oleProposition>
                <trueActions> <!--then updateItemStatus to ONHOLD-->
                    <action>
                        <name>updateItemStatus</name>
                        <parameter>
                            <name>updateItemStatus</name>
                            <value>ONHOLD</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--(StaffRequest)NotCheckedOut: if containsFunction(destinationLocation), [a circulation desk selected by the staff person and does not need to be a 'pickup location' circdesk] operatorsCirculationLocation) AND itemStatus in (Intransit-Per-Staff-Request), then run rule 'Recently returned Check based on Staff'-->
                <name>NotCheckedOut</name>
                <oleProposition> <!--if containsFunction(destinationLocation, operatorsCirculationLocation) AND itemStatus in (Intransit-Per-Staff-Request)-->
                    <type>compound</type>
                    <compoundProposition>
                        <operator>AND</operator>
                        <simpleProposition> <!--if containsFunction(destinationLocation, operatorsCirculationLocation)-->
                            <function>containsFunction</function>
                            <term>
                                <type>java.lang.String</type>
                                <value>destinationLocation</value>
                            </term>
                            <term>
                                <type>java.lang.String</type>
                                <value>operatorsCirculationLocation</value>
                            </term>
                        </simpleProposition>
                        <simpleProposition> <!--if itemStatus in (Intransit-Per-Staff-Request)-->
                            <term>
                                <type>java.lang.String</type>
                                <value>itemStatus</value>
                            </term>
                            <operator>IN</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>INTRANSIT-PER-STAFF-REQUEST</name>
                                </value>
                            </values>
                        </simpleProposition>
                    </compoundProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--Recently returned Check based on staff: if shelvingLagTime > 0, then updateItemStatus = Recently-Returned, else updateItemStatus = Available-->
                        <name>Recently returned Check based on staff</name>
                        <oleProposition> <!--if shelvingLagTime > 0-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.Integer</type>
                                    <value>shelvingLagTime</value>
                                </term>
                                <operator>greaterThan</operator>
                                <values>
                                    <value>
                                        <type>java.lang.Integer</type>
                                        <name>0</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--then updateItemStatus = Recently-Returned-->
                            <action>
                                <name>updateItemStatus</name>
                                <parameter>
                                    <name>updateItemStatus</name>
                                    <value>RECENTLY-RETURNED</value>
                                </parameter>
                            </action>
                        </trueActions>
                        <falseActions> <!--else updateItemStatus = Available-->
                            <action>
                                <name>updateItemStatus</name>
                                <parameter>
                                    <name>updateItemStatus</name>
                                    <value>AVAILABLE</value>
                                </parameter>
                            </action>
                        </falseActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--DeliveryRequest: if requestType in (Recall/Delivery Request, Hold/Delivery Request),then checkout = content for mail-->
                <name>DeliveryRequest</name>
                <oleProposition> <!--if requestType in (Recall/Delivery Request, Hold/Delivery Request)-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>requestType</value>
                        </term>
                        <operator>IN</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>Recall/Delivery Request</name>
                            </value>
                            <value>
                                <type>java.lang.String</type>
                                <name>Hold/Delivery Request</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then checkout = content for mail-->
                    <action>
                        <name>checkout</name>
                        <parameter>
                            <name>checkout</name>
                            <value>Content for mail</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--HoldRequest: if requestType in (Recall/Hold Request, Hold/Hold Request, Page/Hold Request), then run rule LocationCheck-->
                <name>HoldRequest</name>
                <oleProposition> <!--if requestType in (Recall/Hold Request, Hold/Hold Request, Page/Hold Request)-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>requestType</value>
                        </term>
                        <operator>IN</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>Recall/Hold Request</name>
                            </value>
                            <value>
                                <type>java.lang.String</type>
                                <name>Hold/Hold Request</name>
                            </value>
                            <value>
                                <type>java.lang.String</type>
                                <name>Page/Hold Request</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--run rule LocationCheck-->
                    <rule> <!--if containsFunction(itemPickUpLocation, operatorsCirculationLocation), then updateItemStatus = onhold, else updateItemStatus = Intransit-For-Hold-->
                        <name>LocationCheck</name>
                        <oleProposition> <!--if containsFunction(itemPickUpLocation, operatorsCirculationLocation)-->
                            <type>simple</type>
                            <simpleProposition>
                                <function>containsFunction</function>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>itemPickUpLocation</value>
                                </term>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>operatorsCirculationLocation</value>
                                </term>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--then updateItemStatus = onhold-->
                            <action>
                                <name>updateItemStatus</name>
                                <parameter>
                                    <name>updateItemStatus</name>
                                    <value>ONHOLD</value>
                                </parameter>
                            </action>
                        </trueActions>
                        <falseActions> <!--else updateItemStatus = Intransit-For-Hold-->
                            <action>
                                <name>updateItemStatus</name>
                                <parameter>
                                    <name>updateItemStatus</name>
                                    <value>INTRANSIT-FOR-HOLD</value>
                                </parameter>
                            </action>
                        </falseActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Circulation Policy Set 1 Validation for CheckIn: set checkinPolicyNotFound to yes, then run through the checkin policy sets; there appears to be only one checkin policy established-->
                <name>Circulation Policy Set 1 Validation for CheckIn</name>
                <oleProposition> <!--if circulationPolicyFoundFunction(isCirculationPolicyNotFound)-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--run rule "Check in Circulation Policy Set 1"-->
                    <rule> <!--Check in Circulation Policy Set 1: validates combination of item type, borrower type and item location, independent of the circdesk coverage and sets itemstatus, replacementbill if lost,and overdue and Max fines-->
                        <name>Check in Circulation Policy Set 1</name>
                        <oleProposition> <!--check borrowerType, itemType, and itemLibrary-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrower in (Undergrad, Grad)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>UGRAD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GRAD</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--If item in (BOOK, MAGAZINE)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemLibrary in B-EDUC, B-HPER, B-BUSSPEA-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemLibrary</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-EDUC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-HPER</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-BUSSPEA</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--then circulationPolicyFound = true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <rule> <!--OverdueFineCalc; if today>=duedate, then itemstatus=Available AND (if requesttype=*recall*, then overduefine=20/H and MaxFine=100, else overduefine=10/H and MaxFine=100)-->
                                <name>OverdueFineCalculation</name>
                                <oleProposition> <!--if today (I think) =itemDueDate-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <function>currentDateFunction</function>
                                        <term>
                                            <type>java.util.Date</type>
                                            <value>itemDueDate</value>
                                        </term>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions>
                                    <rule> <!-- (Recall check) AND if requestType in *recall*, then overduefine=20/H and MaxFine=100, else overduefine=10/H and MaxFine=100-->
                                        <name>RecalledItems</name>
                                        <oleProposition> <!--if requestType in *recall*-->
                                            <type>simple</type>
                                            <simpleProposition>
                                                <term>
                                                    <type>java.lang.String</type>
                                                    <value>requestType</value>
                                                </term>
                                                <operator>IN</operator>
                                                <values>
                                                    <value>
                                                        <type>java.lang.String</type>
                                                        <name>Recall/Delivery Request</name>
                                                    </value>
                                                    <value>
                                                        <type>java.lang.String</type>
                                                        <name>Recall/Hold Request</name>
                                                    </value>
                                                </values>
                                            </simpleProposition>
                                        </oleProposition>
                                        <trueActions> <!--(multiple actions) overduefine=20/H and MaxFine=100-->
                                            <action> <!--overduefine=100/D-->
                                                <name>overdueFine</name>
                                                <parameter>
                                                    <name>overdueFine</name>
                                                    <value>20/H</value>
                                                </parameter>
                                            </action>
                                            <action> <!--MaxFine=300-->
                                                <name>maxFine</name>
                                                <parameter>
                                                    <name>maxFine</name>
                                                    <value>100</value>
                                                </parameter>
                                            </action>
                                        </trueActions>
                                        <falseActions> <!--(multiple actions) overduefine=10/H and MaxFine=100-->
                                            <action> <!--overduefine=40/D-->
                                                <name>overdueFine</name>
                                                <parameter>
                                                    <name>overdueFine</name>
                                                    <value>10/H</value>
                                                </parameter>
                                            </action>
                                            <action> <!--MaxFine=200-->
                                                <name>maxFine</name>
                                                <parameter>
                                                    <name>maxFine</name>
                                                    <value>100</value>
                                                </parameter>
                                            </action>
                                        </falseActions>
                                    </rule>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Circulation Policy Set 2 Validation for CheckIn:  This rule 1st checks whether an appropriate circulation policy has been found and if not, checks to see if this is the policy to use-->
                <name>Circulation Policy Set 2 Validation for CheckIn</name>
                <oleProposition> <!--if circpolicyFound = isCircPolicyNotFound, then run the policy rules-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--Check in Circulation Policy Set 2: validates combination of item type, borrower type and item location, independent of the circdesk coverage and sets itemstatus, replacementbill if lost,and overdue and Max fines-->
                        <name>Check In Circulation Policy Set 2</name>
                        <oleProposition> <!--if borrowerType in (faculty, staff) AND itemType in (BOOK, magazine, AUDIOCD,AV,AUDIOTAPE,MICRO) AND (itemLibrary in (PERKN) OR itemShelving in (PLI, PLV1))-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (faculty, staff)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FAC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>STAFF</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemType in (BOOK, magazine, AUDIOCD,AV,AUDIOTAPE,MICRO)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AUDIOCD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AV</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AUDIOTAPE</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MICRO</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <compoundProposition> <!--if itemlibrary in (PERKN) OR itemShelving in (PLI, PLV1)-->
                                    <operator>OR</operator>
                                    <simpleProposition> <!--if itemLibrary in (B-HPER)-->
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>itemLibrary</value>
                                        </term>
                                        <operator>IN</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>PERKN</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                    <simpleProposition> <!--if itemShelving in (PLI, PLV1)-->
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>itemShelving</value>
                                        </term>
                                        <operator>IN</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>PLI</name>
                                            </value>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>PLV1</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </compoundProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--then circpolicyfound=true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <rule> <!--OverdueFineCalc; if today=duedate (i think), then itemstatus=Available AND (if requesttype=*recall*, then overduefine=20/H and MaxFine=100, else overduefine=10/H and MaxFine=100)-->
                                <name>OverdueFineCalculation 2</name>
                                <oleProposition> <!--if today >=itemDueDate-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <function>currentDateFunction</function>
                                        <term>
                                            <type>java.util.Date</type>
                                            <value>itemDueDate</value>
                                        </term>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--then itemstatus=Available-->
                                        <name>updateItemStatus</name>
                                        <parameter>
                                            <name>updateItemStatus</name>
                                            <value>AVAILABLE</value>
                                        </parameter>
                                    </action>
                                    <rule> <!-- (Recall check) AND if requestType in *recall*, then overduefine=15/H and MaxFine=100, else overduefine=5/H and MaxFine=50-->
                                        <name>RecalledItems 2</name>
                                        <oleProposition> <!--if requestType in *recall*-->
                                            <type>simple</type>
                                            <simpleProposition>
                                                <term>
                                                    <type>java.lang.String</type>
                                                    <value>requestType</value>
                                                </term>
                                                <operator>IN</operator>
                                                <values>
                                                    <value>
                                                        <type>java.lang.String</type>
                                                        <name>Recall/Delivery Request</name>
                                                    </value>
                                                    <value>
                                                        <type>java.lang.String</type>
                                                        <name>Recall/Hold Request</name>
                                                    </value>
                                                </values>
                                            </simpleProposition>
                                        </oleProposition>
                                        <trueActions> <!--(multiple actions) overduefine=20/H and MaxFine=100-->
                                            <action> <!--overduefine=15/H-->
                                                <name>overdueFine</name>
                                                <parameter>
                                                    <name>overdueFine</name>
                                                    <value>15/H</value>
                                                </parameter>
                                            </action>
                                            <action> <!--MaxFine=100-->
                                                <name>maxFine</name>
                                                <parameter>
                                                    <name>maxFine</name>
                                                    <value>100</value>
                                                </parameter>
                                            </action>
                                        </trueActions>
                                        <falseActions> <!--(multiple actions) overduefine=5/H and MaxFine=50-->
                                            <action> <!--overduefine=5/H-->
                                                <name>overdueFine</name>
                                                <parameter>
                                                    <name>overdueFine</name>
                                                    <value>5/H</value>
                                                </parameter>
                                            </action>
                                            <action> <!--MaxFine=50-->
                                                <name>maxFine</name>
                                                <parameter>
                                                    <name>maxFine</name>
                                                    <value>50</value>
                                                </parameter>
                                            </action>
                                        </falseActions>
                                    </rule>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Circulation Policy Set 3 Validation for CheckIn:  This rule 1st checks whether an appropriate circulation policy has been found and if not, checks to see if this is the policy to use-->
                <name>Circulation Policy Set 3 Validation for CheckIn</name>
                <oleProposition> <!--if circulationPolicyFoundFunction(isCirculationPolicyNotFound)-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--Check in Circulation Policy Set 3: if borrowerType in (researcher, guest, Faculty) AND itemType in (BOOK, magazine) AND itemShelving in ((JRLRES, LawRes, FRD, SciDDC), then circpolicyFound=True AND -->
                        <name>Check In Circulation Policy Set 3</name>
                        <oleProposition> <!--if borrowerType in (researcher, Guest, Faculty) AND, itemtype in (BOOK, magazine) AND  itemShelving in (JRLRES, LawRes, FRD, SciDDC)-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (researcher, guest, Faculty)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>RES</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GUEST</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FAC</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemType in (BOOK, magazine)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!-- if itemShelving in ((JRLRES, LawRes, FRD, SciDDC)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemShelving</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>JRLRES</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>LawRes</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FRD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>SciDDC</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--then CircPolicyFound=true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <rule> <!--OverdueFineCalc; if today=duedate (i think), then itemstatus=Available AND (if requesttype=*recall*, then overduefine=100/D and MaxFine=300, else overduefine=40/D and MaxFine=200)-->
                                <name>OverdueFineCalculation 3</name>
                                <oleProposition> <!--if today >=itemDueDate-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <function>currentDateFunction</function>
                                        <term>
                                            <type>java.util.Date</type>
                                            <value>itemDueDate</value>
                                        </term>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--then itemstatus=Available-->
                                        <name>updateItemStatus</name>
                                        <parameter>
                                            <name>updateItemStatus</name>
                                            <value>AVAILABLE</value>
                                        </parameter>
                                    </action>
                                    <rule> <!-- (Recall check) AND if requestType in *recall*, then overduefine=100/D and MaxFine=300, else overduefine=40/D and MaxFine=200-->
                                        <name>RecalledItems 3</name>
                                        <oleProposition> <!--if requestType in *recall*-->
                                            <type>simple</type>
                                            <simpleProposition>
                                                <term>
                                                    <type>java.lang.String</type>
                                                    <value>requestType</value>
                                                </term>
                                                <operator>IN</operator>
                                                <values>
                                                    <value>
                                                        <type>java.lang.String</type>
                                                        <name>Recall/Delivery Request</name>
                                                    </value>
                                                    <value>
                                                        <type>java.lang.String</type>
                                                        <name>Recall/Hold Request</name>
                                                    </value>
                                                </values>
                                            </simpleProposition>
                                        </oleProposition>
                                        <trueActions> <!--(multiple actions) overduefine=100/D and MaxFine=300-->
                                            <action> <!--overduefine=100/D-->
                                                <name>overdueFine</name>
                                                <parameter>
                                                    <name>overdueFine</name>
                                                    <value>100/D</value>
                                                </parameter>
                                            </action>
                                            <action> <!--MaxFine=100-->
                                                <name>maxFine</name>
                                                <parameter>
                                                    <name>maxFine</name>
                                                    <value>300</value>
                                                </parameter>
                                            </action>
                                        </trueActions>
                                        <falseActions> <!--(multiple actions) overduefine=40/D and MaxFine=200-->
                                            <action> <!--overduefine=40/D-->
                                                <name>overdueFine</name>
                                                <parameter>
                                                    <name>overdueFine</name>
                                                    <value>40/D</value>
                                                </parameter>
                                            </action>
                                            <action> <!--MaxFine=200-->
                                                <name>maxFine</name>
                                                <parameter>
                                                    <name>maxFine</name>
                                                    <value>200</value>
                                                </parameter>
                                            </action>
                                        </falseActions>
                                    </rule>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Checkin Policy not found; if isCircPolicyNotFound, then send a message-->
                <name>Check in Circulation Policy Not Found</name>
                <oleProposition>
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>There is no circulation rule for this combination.</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
        </rules>
    </agenda>
    <agenda> <!--Request Validation:  contains the policies for Requests-->
        <name>Request Validation</name>
        <rules>
            <rule> <!--RequestApproval; This rule checks whether request type id is Page/DeliveryRequest,Page/HoldRequest,CopyRequest-->
                <name>RequestApproval</name>
                <oleProposition> <!--if RequestType in Page/DeliveryRequest,Page/HoldRequest,CopyRequest, route to peopleflow-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>requestType</value>
                        </term>
                        <operator>IN</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>Page/Delivery Request</name>
                            </value>
                            <value>
                                <type>java.lang.String</type>
                                <name>Page/Hold Request</name>
                            </value>
                            <value>
                                <type>java.lang.String</type>
                                <name>Copy Request</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--RouteToPeopleFlow: the predefined peopleFlow is called RequestApproval-->
                    <action>
                        <name>Route to PeopleFlow</name>
                        <parameter>
                            <name>Route to PeopleFlow</name>
                            <value>Request Approval</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--RecallCheck; This rule checks whether request type is Recall/DeliveryRequest,Recall/HoldRequest-->
                <name>RecallCheck</name>
                <oleProposition> <!--if RequestType in Recall/DeliveryRequest,Recall/HoldRequest, generateNotice = RecallNotice-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>requestType</value>
                        </term>
                        <operator>IN</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>Recall/Delivery Request</name>
                            </value>
                            <value>
                                <type>java.lang.String</type>
                                <name>Recall/Hold Request</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <action> <!--set generateNotice=RecallNotice-->
                        <name>generateNotice</name>
                        <parameter>
                            <name>generateNotice</name>
                            <value>RecallNotice</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--ValidationRequestPolicySet1:-->
                <name>Circulation Policy Set 1 Validation for Request</name>
                <oleProposition> <!--set isCircPolicyNotFound-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>  <!--then run the real rules for the policy-->
                    <rule> <!--RequestPolicySet1: if borrowerType in (undergrad, grad) AND itemtype in (BOOK, magazine) AND if location in (ILXSTACKS, IL-ALEXAND/ILXSTACKS), then set minimum loan and recall loan periods, run rules to check # of recalls, number of holds, number of Page Requests-->
                        <name>Request Circulation Policy Set 1</name>
                        <oleProposition> <!--if borrowerType in (undergrad, grad) AND itemtype in (BOOK, magazine) AND if location in (ILXSTACKS, IL-ALEXAND/ILXSTACKS)-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (undergrad, grad)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>UGRAD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GRAD</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemtype in (BOOK, magazine)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemLibrary in B-EDUC, B-HPER, B-BUSSPEA-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemLibrary</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-EDUC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-HPER</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-BUSSPEA</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions> <!--then circPolicyFound true AND set minimumLoanPeriod=5-D and recallLoanPeriod=2-D AND set requestExpirationDay=10 AND determine if max# recall, holds and page requests exceeded-->
                            <action> <!--then circPolicyFound true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <action> <!--requestExpirationDay: requestExpirationDay=10-->
                                <name>requestExpirationDay</name>
                                <parameter>
                                    <name>requestExpirationDay</name>
                                    <value>10</value>
                                </parameter>
                            </action>
                            <rule> <!--MaxNumberOfRecallRequest: if requestType in (Recall/Hold, Recall/Deliver) AND maxNumberOfRecallRequest > 2, display message that max number of holds exceeded-->
                                <name>MaxNumberOfRecallRequestAndRecallDueDateCheck</name>
                                <oleProposition> <!--if requestType in (Recall/Hold, Recall/Deliver)-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>requestType</value>
                                        </term>
                                        <operator>IN</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>Recall/Hold Request</name>
                                            </value>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>Recall/Delivery Request</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--set recallDueDate=5 and recallLoanPeriod=2-d and run rule checking on max number of recall requests -->
                                    <action> <!--then set recallDueDate=5-d and recallLoanPeriod=2-d-->
                                        <name>recallDueDate</name>
                                        <parameter>
                                            <name>minimumLoanPeriod</name>
                                            <value>1-H</value>
                                        </parameter>
                                        <parameter>
                                            <name>recallLoanPeriod</name>
                                            <value>2-D</value>
                                        </parameter>
                                    </action>
                                    <rule> <!--and run rule MaxNumberOfRecallRequest if > 2 then display error-->
                                        <name>MaxNumberOfRecallRequest</name>
                                        <oleProposition> <!--if maxnumberOfRecallRequest > 2-->
                                            <type>simple</type>
                                            <simpleProposition>
                                                <term>
                                                    <type>java.lang.Integer</type>
                                                    <value>maxNumberOfRecallRequest</value>
                                                </term>
                                                <operator>greaterThan</operator>
                                                <values>
                                                    <value>
                                                        <type>java.lang.Integer</type>
                                                        <name>2</name>
                                                    </value>
                                                </values>
                                            </simpleProposition>
                                        </oleProposition>
                                        <trueActions> <!--display error-->
                                            <action>
                                                <name>errorAction</name>
                                                <parameter>
                                                    <name>errorMessage</name>
                                                    <value>The item has the Maximum number of Recall Requests (2)</value>
                                                </parameter>
                                            </action>
                                        </trueActions>
                                    </rule>
                                </trueActions>
                            </rule>
                            <rule> <!--MaxNumberOfHoldRequest: if requestType in (Hold/hold, Hold/delivery) AND if maxNumberOfHoldRequest >2, display message that hold requests exceeded-->
                                <name>MaxNumberOfHoldRequest</name>
                                <oleProposition> <!--if requestType in (Hold/hold, Hold/delivery) AND if maxNumberOfHoldRequest >2-->
                                    <type>compound</type>
                                    <compoundProposition>
                                        <operator>AND</operator>
                                        <simpleProposition> <!--if requestType in (Hold/hold, Hold/delivery)-->
                                            <term>
                                                <type>java.lang.String</type>
                                                <value>requestType</value>
                                            </term>
                                            <operator>IN</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Hold/Hold Request</name>
                                                </value>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Hold/Delivery Request</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                        <simpleProposition> <!--if maxNumberOfHoldRequest >2-->
                                            <term>
                                                <type>java.lang.Integer</type>
                                                <value>maxNumberOfHoldRequest</value>
                                            </term>
                                            <operator>greaterThan</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.Integer</type>
                                                    <name>2</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                    </compoundProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--display message that hold requests exceeded-->
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Hold Requests exceeds the maximum (2).</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--MaxNumberOfPageRequest: if requestType in (page/hold, page/delivery) AND if maxNumberOfPageRequest > 2, then display message that max number of page requests exceeded-->
                                <name>MaxNumberOfPageRequest</name>
                                <oleProposition> <!--if requestType in (page/hold, page/delivery) AND if maxNumberOfPageRequest > 2-->
                                    <type>compound</type>
                                    <compoundProposition>
                                        <operator>AND</operator>
                                        <simpleProposition> <!--if requestType in (page/hold, page/delivery)-->
                                            <term>
                                                <type>java.lang.String</type>
                                                <value>requestType</value>
                                            </term>
                                            <operator>IN</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Page/Hold Request</name>
                                                </value>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Page/Delivery Request</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                        <simpleProposition> <!--if maxNumberOfPageRequest > 2-->
                                            <term>
                                                <type>java.lang.Integer</type>
                                                <value>maxNumberOfPageRequest</value>
                                            </term>
                                            <operator>greaterThan</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.Integer</type>
                                                    <name>2</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                    </compoundProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--display message that max number of page requests exceeded-->
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Page requests exceed the maximum (2).</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--ValidationRequestPolicySet2:-->
                <name>Circulation Policy Set 2 Validation for Request</name>
                <oleProposition> <!--set isCircPolicyNotFound-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>  <!--then run the real rules for the policy-->
                    <rule> <!--Added values to each param RequestPolicySet1: if borrowerType in (FACULTY, STAFF) AND itemtype in (BOOK,magazine) AND if location in (BED-STACKS,BHP-JOURNALS,PLI,PLV1), then set minimum loan and recall loan periods, run rules to check # of recalls, number of holds, number of Page Requests-->
                        <name>Request Circulation Policy Set 2</name>
                        <oleProposition> <!--if borrowerType in (faculty,STAFF)  AND itemtype in (book, magazine,) AND if location in (BED-STACKS,BHP-JOURNALS,PLI,PLV1) -->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (faculty,STAFF)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FAC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>STAFF</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemtype in (book, magazine,AUDIOTAPE)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AUDIOTAPE</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemShelving in (BED-STACKS,BHP-JOURNALS,PLI,PLV1)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemShelving</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BED-STACKS</name>
                                        </value>                         
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BHP-JOURNALS</name>
                                        </value>                                   
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>PLI</name>
                                        </value>                  
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>PLV1</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions> <!--then circPolicyFound true AND set minimumLoanPeriod=5-D and recallLoanPeriod=2-D AND set requestExpirationDay=10 AND determine if max# recall, holds and page requests exceeded-->
                            <action> <!--then circPolicyFound true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <action> <!--requestExpirationDay: requestExpirationDay=10-->
                                <name>requestExpirationDay</name>
                                <parameter>
                                    <name>requestExpirationDay</name>
                                    <value>10</value>
                                </parameter>
                            </action>
                            <rule> <!--MaxNumberOfRecallRequest: if requestType in (Recall/Hold, Recall/Deliver) AND maxNumberOfRecallRequest > 2, display message that max number of holds exceeded-->
                                <name>MaxNumberOfRecallRequestAndRecallDueDateCheck2</name>
                                <oleProposition> <!--if requestType in (Recall/Hold, Recall/Deliver)-->
                                    <type>simple</type>
                                    <simpleProposition>
                                        <term>
                                            <type>java.lang.String</type>
                                            <value>requestType</value>
                                        </term>
                                        <operator>IN</operator>
                                        <values>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>Recall/Hold Request</name>
                                            </value>
                                            <value>
                                                <type>java.lang.String</type>
                                                <name>Recall/Delivery Request</name>
                                            </value>
                                        </values>
                                    </simpleProposition>
                                </oleProposition>
                                <trueActions> <!--set recallDueDate=5 and recallLoanPeriod=2-d and run rule checking on max number of recall requests -->
                                    <action> <!--then set recallDueDate=5-d and recallLoanPeriod=2-d-->
                                        <name>recallDueDate</name>
                                        <parameter>
                                            <name>minimumLoanPeriod</name>
                                            <value>1-H</value>
                                        </parameter>
                                        <parameter>
                                            <name>recallLoanPeriod</name>
                                            <value>1-D</value>
                                        </parameter>
                                    </action>
                                    <rule> <!--and run rule MaxNumberOfRecallRequest if > 2 then display error-->
                                        <name>MaxNumberOfRecallRequest2</name>
                                        <oleProposition> <!--if maxnumberOfRecallRequest > 2-->
                                            <type>simple</type>
                                            <simpleProposition>
                                                <term>
                                                    <type>java.lang.Integer</type>
                                                    <value>maxNumberOfRecallRequest</value>
                                                </term>
                                                <operator>greaterThan</operator>
                                                <values>
                                                    <value>
                                                        <type>java.lang.Integer</type>
                                                        <name>1</name>
                                                    </value>
                                                </values>
                                            </simpleProposition>
                                        </oleProposition>
                                        <trueActions> <!--display error-->
                                            <action>
                                                <name>errorAction</name>
                                                <parameter>
                                                    <name>errorMessage</name>
                                                    <value>The item has the Maximum number of Recall Requests (1)</value>
                                                </parameter>
                                            </action>
                                        </trueActions>
                                    </rule>
                                </trueActions>
                            </rule>
                            <rule> <!--MaxNumberOfHoldRequest: if requestType in (Hold/hold, Hold/delivery) AND if maxNumberOfHoldRequest >2, display message that hold requests exceeded-->
                                <name>MaxNumberOfHoldRequest2</name>
                                <oleProposition> <!--if requestType in (Hold/hold, Hold/delivery) AND if maxNumberOfHoldRequest >2-->
                                    <type>compound</type>
                                    <compoundProposition>
                                        <operator>AND</operator>
                                        <simpleProposition> <!--if requestType in (Hold/hold, Hold/delivery)-->
                                            <term>
                                                <type>java.lang.String</type>
                                                <value>requestType</value>
                                            </term>
                                            <operator>IN</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Hold/Hold Request</name>
                                                </value>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Hold/Delivery Request</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                        <simpleProposition> <!--if maxNumberOfHoldRequest >2-->
                                            <term>
                                                <type>java.lang.Integer</type>
                                                <value>maxNumberOfHoldRequest</value>
                                            </term>
                                            <operator>greaterThan</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.Integer</type>
                                                    <name>1</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                    </compoundProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--display message that hold requests exceeded-->
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Hold Requests exceeds the maximum (1).</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--MaxNumberOfPageRequest: if requestType in (page/hold, page/delivery) AND if maxNumberOfPageRequest > 2, then display message that max number of page requests exceeded-->
                                <name>MaxNumberOfPageRequestSet2</name>
                                <oleProposition> <!--if requestType in (page/hold, page/delivery) AND if maxNumberOfPageRequest > 2-->
                                    <type>compound</type>
                                    <compoundProposition>
                                        <operator>AND</operator>
                                        <simpleProposition> <!--if requestType in (page/hold, page/delivery)-->
                                            <term>
                                                <type>java.lang.String</type>
                                                <value>requestType</value>
                                            </term>
                                            <operator>IN</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Page/Hold Request</name>
                                                </value>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>Page/Delivery Request</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                        <simpleProposition> <!--if maxNumberOfPageRequest > 2-->
                                            <term>
                                                <type>java.lang.Integer</type>
                                                <value>maxNumberOfPageRequest</value>
                                            </term>
                                            <operator>greaterThan</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.Integer</type>
                                                    <name>1</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                    </compoundProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--display message that max number of page requests exceeded-->
                                        <name>errorAction</name>
                                        <parameter>
                                            <name>errorMessage</name>
                                            <value>Page requests exceed the maximum (1).</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--if isCircPolicyNotFound, display the message-->
                <name>Request Circulation Policy Not Found</name>
                <oleProposition>
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>There is no circulation rule for this combination.</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
        </rules>
    </agenda>
    <agenda> <!--The agenda 'Notice Validation' Contains the policies for notices-->
        <name>Notice Validation</name>
        <rules>
            <rule>  <!--CourtesyNoticeCheck: if dueDateDiffInterval=configurableInterval, then set generateNotice=CourtesyNotice-->
                <name>Courtesy Notice Check</name>
                <oleProposition>
                    <type>simple</type>
                    <simpleProposition> <!--if dueDateDiffInterval=configurableInterval-->
                        <term>
                            <type>java.lang.Integer</type>
                            <value>dueDateDiffInterval</value>
                        </term>
                        <operator>=</operator>
                        <term>
                            <type>java.lang.Integer</type>
                            <value>configurableInterval</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <action> <!--set generateNotice=CourtesyNotice-->
                        <name>generateNotice</name>
                        <parameter>
                            <name>generateNotice</name>
                            <value>CourtesyNotice</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--Notice Validation Policy Set 1: If if circPolicyFound function isCircPolicyNotFound, Then (if borrowtype in (#) and itemtype in (#) and itemlocation in (#), then (set policyfound = true) AND (check holdNotice) AND (check overdueNotice))-->
                <name>Circulation Policy Set 1 Validation for Notice</name>
                <oleProposition> <!--if circPolicyFound function isCircPolicyNotFound-->
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--NoticeCircPolicySet1: if borrowtype in (#) and itemtype in (#) and itemlocation in (#), then (set policyfound = true) AND (check holdNotice) AND (check overdueNotice)-->
                        <name>Notice Circulation Policy Set 1</name>
                        <oleProposition> <!--if borrowerType in (Undergrad, graduate) AND if itemtype in (BOOK, magazine) AND (if itemShelving in (ILXSTACKS,GEOLMAPR,  GEN) OR if itemLibrary in (IL-ALEXAND, BH-Eigenmn))-->
                            <type>compound</type>
                            <compoundProposition>
                                <operator>AND</operator>
                                <simpleProposition> <!--if borrowerType in (Undergrad, graduate)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>borrowerType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>UGRAD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GRAD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FAC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>STAFF</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>RES</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>GUEST</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemtype in (BOOK, magazine)-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemType</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>BOOK</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MAGAZINE</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AUDIOCD</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AUDIOTAPE</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>AV</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>MICRO</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                                <simpleProposition> <!--if itemLibrary in B-EDUC, B-HPER, B-BUSSPEA-->
                                    <term>
                                        <type>java.lang.String</type>
                                        <value>itemLibrary</value>
                                    </term>
                                    <operator>IN</operator>
                                    <values>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-EDUC</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-HPER</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>B-BUSSPEA</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>PERKN</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>LILLY</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>JRL</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>DLL</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>JCL</name>
                                        </value>
                                        <value>
                                            <type>java.lang.String</type>
                                            <name>FORD</name>
                                        </value>
                                    </values>
                                </simpleProposition>
                            </compoundProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--set circulationPolicyFound to true-->
                                <name>circulationPolicyFound</name>
                                <parameter>
                                    <name>circulationPolicyFound</name>
                                    <value>true</value>
                                </parameter>
                            </action>
                            <rule> <!--Hold Courtesy Notice Check: if (itemStatus = ONHOLD  AND numberOfDaysOnHold>max#ofDaysOnHold), then generateNotice = HoldCourtesyNotice-->
                                <name>Hold Courtesy Notice Check</name>
                                <oleProposition> <!--if (itemStatus = ONHOLD  AND numberOfDaysOnHold>max#ofDaysOnHold)-->
                                    <type>compound</type>
                                    <compoundProposition>
                                        <operator>AND</operator>
                                        <simpleProposition> <!--if itemStatus = ONHOLD-->
                                            <term>
                                                <type>java.lang.String</type>
                                                <value>itemStatus</value>
                                            </term>
                                            <operator>=</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>ONHOLD</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                        <simpleProposition> <!--if numberOfDaysOnHold>max#ofDaysOnHold-->
                                            <term>
                                                <type>java.lang.Integer</type>
                                                <value>numberOfDaysOnHold</value>
                                            </term>
                                            <operator>greaterThan</operator>
                                            <term>
                                                <type>java.lang.Integer</type>
                                                <value>maxNumberOfDaysOnHold</value>
                                            </term>
                                        </simpleProposition>
                                    </compoundProposition>
                                </oleProposition>
                                <trueActions>
                                    <action> <!--GenerateNotice: then generateNotice = HoldCourtesyNotice-->
                                        <name>generateNotice</name>
                                        <parameter>
                                            <name>generateNotice</name>
                                            <value>HoldCourtesyNotice</value>
                                        </parameter>
                                    </action>
                                </trueActions>
                            </rule>
                            <rule> <!--OverdueNoticeCheck: if (claimsReturned=true OR replacementFeePatronBill in true) then do nothing, Else (if numberOfOverdueSent < 5, then (if dueDateSumInterval=intervalWithNoticeCount, then set generateNotice=OverDueNotice), Else set updateItemStatus=LOST)-->
                                <name>OverdueNotice Check</name>
                                <oleProposition>
                                    <type>compound</type>
                                    <compoundProposition>
                                        <operator>AND</operator>
                                        <simpleProposition> <!--if claimsReturned=true-->
                                            <term>
                                                <type>java.lang.String</type>
                                                <value>claimsReturned</value>
                                            </term>
                                            <operator>=</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>false</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                        <simpleProposition> <!--if replacementFeePatronBill in true-->
                                            <term>
                                                <type>java.lang.String</type>
                                                <value>replacementFeePatronBill</value>
                                            </term>
                                            <operator>=</operator>
                                            <values>
                                                <value>
                                                    <type>java.lang.String</type>
                                                    <name>false</name>
                                                </value>
                                            </values>
                                        </simpleProposition>
                                    </compoundProposition>
                                </oleProposition>
                                <trueActions>
                                    <rule> <!--MaxNumberOfOverDueNotices: if numberOfOverdueSent < 5, then (if dueDateSumInterval=intervalWithNoticeCount, then set generateNotice=OverDueNotice), Else set updateItemStatus=LOST-->
                                        <name>MaxNumberOfOverDueNotices</name>
                                        <oleProposition> <!--if numberOfOverdueSent < 5-->
                                            <type>simple</type>
                                            <simpleProposition>
                                                <term>
                                                    <type>java.lang.Integer</type>
                                                    <value>numberOfOverdueSent</value>
                                                </term>
                                                <operator>lessThan</operator>
                                                <values>
                                                    <value>
                                                        <type>java.lang.Integer</type>
                                                        <name>2</name>
                                                    </value>
                                                </values>
                                            </simpleProposition>
                                        </oleProposition>
                                        <trueActions>
                                            <rule> <!--CheckDueDateWithInterval: if dueDateSumInterval=intervalWithNoticeCount, then set generateNotice=OverDueNotice-->
                                                <name>CheckDueDateWithInterval</name>
                                                <oleProposition> <!--if dueDateSumInterval=intervalWithNoticeCount-->
                                                    <type>simple</type>
                                                    <simpleProposition>
                                                        <term>
                                                            <type>java.lang.Integer</type>
                                                            <value>dueDateSumInterval</value>
                                                        </term>
                                                        <operator>=</operator>
                                                        <term>
                                                            <type>java.lang.Integer</type>
                                                            <value>intervalWithNoticeCount</value>
                                                        </term>
                                                    </simpleProposition>
                                                </oleProposition>
                                                <trueActions> <!--generateNotice: set generateNotice=OverDueNotice-->
                                                    <action>
                                                        <name>generateNotice</name>
                                                        <parameter>
                                                            <name>generateNotice</name>
                                                            <value>OverdueNotice</value>
                                                        </parameter>
                                                    </action>
                                                </trueActions>
                                            </rule>
                                        </trueActions>
                                        <falseActions> <!--updateItemStatus: set updateItemStatus=LOST AND set replacementBill=100 -->
                                            <action>
                                                <name>replacementBill</name>
                                                <parameter>
                                                    <name>replacementBill</name>
                                                    <value>100</value>
                                                </parameter>
                                            </action>
                                            <action>
                                                <name>updateItemStatus</name>
                                                <parameter>
                                                    <name>updateItemStatus</name>
                                                    <value>LOST</value>
                                                </parameter>
                                            </action>
                                        </falseActions>
                                    </rule>
                                </trueActions>
                            </rule>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
            <rule> <!--Policy Not found-->
                <name>Notice Circulation Policy Not Found</name>
                <oleProposition>
                    <type>simple</type>
                    <simpleProposition>
                        <function>circulationPolicyFoundFunction</function>
                        <term>
                            <type>java.lang.String</type>
                            <value>isCirculationPolicyNotFound</value>
                        </term>
                    </simpleProposition>
                </oleProposition>
                <trueActions>
                    <action>
                        <name>errorAction</name>
                        <parameter>
                            <name>errorMessage</name>
                            <value>There is no circulation rule for this combination.</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
        </rules>
    </agenda>
    <agenda> <!--'Batch Program Agenda' includes  TemporaryHistoryRecordDelete and Notice Type Check; noticeTypecheck is only for select borrowerTypes and select circdesks-->
        <name>Batch Program Agenda</name>
        <rules>
            <rule> <!--TemporaryHistoryRecordDelete:  if isTemporaryHistoryRecord=true, then deleteTemporaryHistoryRecord=10-D (maximum number of days to keep temporary history record; whether to delete temporary history record or not based on maxdays-->
                <name>TemporaryHistoryRecordDelete</name>
                <oleProposition> <!--if isTemporaryHistoryRecord=true-->
                    <type>simple</type>
                    <simpleProposition>
                        <term>
                            <type>java.lang.String</type>
                            <value>isTemporaryHistoryRecord</value>
                        </term>
                        <operator>=</operator>
                        <values>
                            <value>
                                <type>java.lang.String</type>
                                <name>true</name>
                            </value>
                        </values>
                    </simpleProposition>
                </oleProposition>
                <trueActions> <!--then deleteTemporaryHistoryRecord=10-D (maximum number of days to keep temporary history record)-->
                    <action>
                        <name>deleteTemporaryHistoryRecord</name>
                        <parameter>
                            <name>deleteTemporaryHistoryRecord</name>
                            <value>10-D</value>
                        </parameter>
                    </action>
                </trueActions>
            </rule>
            <rule> <!--Notice Type Check:  if borrowerType in (Undergrad, graduate, Faculty) AND deskLocation in (ILXSTACKS, IL-ALEXAND/ILXSTACKS), then determine notice method (email, sms, mail-->
                <name>Notice Type Check</name>
                <oleProposition> <!--if borrowerType in (Undergrad, graduate, Faculty) AND deskLocation in (ILXSTACKS, IL-ALEXAND/ILXSTACKS)-->
                    <type>compound</type>
                    <compoundProposition> <!--if borrowerType in (Undergrad, graduate, Faculty) AND deskLocation in (ILXSTACKS, IL-ALEXAND/ILXSTACKS)-->
                        <operator>AND</operator>
                        <simpleProposition> <!--if borrowerType in (Undergrad, graduate, Faculty)-->
                            <term>
                                <type>java.lang.String</type>
                                <value>borrowerType</value>
                            </term>
                            <operator>IN</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>UGRAD</name>
                                </value>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>GRAD</name>
                                </value>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>FAC</name>
                                </value>
                            </values>
                        </simpleProposition>
                        <simpleProposition> <!--if deskLocation in (BL_EDUC, UC_JRLMAIN)-->
                            <term>
                                <type>java.lang.String</type>
                                <value>deskLocation</value>
                            </term>
                            <operator>IN</operator>
                            <values>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>BL_EDUC</name>
                                </value>
                                <value>
                                    <type>java.lang.String</type>
                                    <name>UC_JRLMAIN</name>
                                </value>
                            </values>
                        </simpleProposition>
                    </compoundProposition>
                </oleProposition>
                <trueActions>
                    <rule> <!--emailForOverdueNotice: if notice=overdueNotice, set noticeType email-->
                        <name>email for overdue notice</name>
                        <oleProposition> <!--if notice=overdueNotice-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>notice</value>
                                </term>
                                <operator>=</operator>
                                <values>
                                    <value>
                                        <type>java.lang.String</type>
                                        <name>OverdueNotice</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions>
                            <action> <!--noticeType: set noticeType email-->
                                <name>noticeType</name>
                                <parameter>
                                    <name>noticeType</name>
                                    <value>email</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                    <rule> <!--mail for courtesy notice: if notice=courtesy, then set noticeType=sms-->
                        <name>sms for courtesy notice</name>
                        <oleProposition> <!--if notice=courtesy-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>notice</value>
                                </term>
                                <operator>=</operator>
                                <values>
                                    <value>
                                        <type>java.lang.String</type>
                                        <name>CourtesyNotice</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--set noticeType=sms-->
                            <action>
                                <name>noticeType</name>
                                <parameter>
                                    <name>noticeType</name>
                                    <value>mail</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                    <rule> <!--mail for holdCourtesy notice: if notice=HoldCourtesyNotice, then set noticeType=mail-->
                        <name>mail for holdCourtesy notice</name>
                        <oleProposition> <!--if notice=HoldCourtesyNotice-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>notice</value>
                                </term>
                                <operator>=</operator>
                                <values>
                                    <value>
                                        <type>java.lang.String</type>
                                        <name>HoldCourtesyNotice</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--set noticeType=mail-->
                            <action>
                                <name>noticeType</name>
                                <parameter>
                                    <name>noticeType</name>
                                    <value>email</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                    <rule> <!--mail for OnHoldNotice notice: if notice=OnHoldNotice, then set noticeType=mail-->
                        <name>mail for OnHoldNotice notice</name>
                        <oleProposition> <!--if notice=OnHoldNotice-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>notice</value>
                                </term>
                                <operator>=</operator>
                                <values>
                                    <value>
                                        <type>java.lang.String</type>
                                        <name>OnHoldNotice</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--set noticeType=mail-->
                            <action>
                                <name>noticeType</name>
                                <parameter>
                                    <name>noticeType</name>
                                    <value>mail</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                    <rule> <!--mail for ExpiredRequestNotice notice: if notice=ExpiredRequestNotice, then set noticeType=mail-->
                        <name>mail for ExpiredRequestNotice notice</name>
                        <oleProposition> <!--if notice=ExpiredRequestNotice-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>notice</value>
                                </term>
                                <operator>=</operator>
                                <values>
                                    <value>
                                        <type>java.lang.String</type>
                                        <name>ExpiredRequestNotice</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--set noticeType=mail-->
                            <action>
                                <name>noticeType</name>
                                <parameter>
                                    <name>noticeType</name>
                                    <value>mail</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                    <rule> <!--mail for RecallNotice notice: if notice=RecallNotice, then set noticeType=mail-->
                        <name>mail for RecallNotice notice</name>
                        <oleProposition> <!--if notice=RecallNotice-->
                            <type>simple</type>
                            <simpleProposition>
                                <term>
                                    <type>java.lang.String</type>
                                    <value>notice</value>
                                </term>
                                <operator>=</operator>
                                <values>
                                    <value>
                                        <type>java.lang.String</type>
                                        <name>RecallNotice</name>
                                    </value>
                                </values>
                            </simpleProposition>
                        </oleProposition>
                        <trueActions> <!--set noticeType=mail-->
                            <action>
                                <name>noticeType</name>
                                <parameter>
                                    <name>noticeType</name>
                                    <value>mail</value>
                                </parameter>
                            </action>
                        </trueActions>
                    </rule>
                </trueActions>
            </rule>
        </rules>
    </agenda>
</agendas>